#!/usr/bin/env bash

set -e

if [[ $@ =~ --help || $@ =~ -h ]]; then
    echo "Usage: v [name] [python]"
    echo
    echo "Activates or creates a virtualenv using virtualenvwrapper"
    echo "Uses a default name of 'default' and the default python ($(which python))"
    exit
fi

# Use 'default' as the default name
# $1 -> V_DEFAULT -> 'default'
V_NAME=${1:-$V_DEFAULT_NAME}
V_NAME=${1:-default}

# Use the system's python by default
# $2 -> V_DEFAULT_PYTHON -> $(which python)
V_PYTHON=${2:-$V_DEFAULT_PYTHON}
V_PYTHON=${2:-$(which python)}

# Select a directory virtualenvs will be placed in
# This is also where hooks will be looked for
# $V_HOME -> $WORKON_HOME -> $HOME/.virtualenv
V_HOME=${V_HOME:=$WORKON_HOME}
V_HOME=${V_HOME:=$HOME/.virtualenv}

# Create the virtualenv if it does not already exist
if [[ ! -d "$V_HOME/$V_NAME" || ! -f "$V_HOME/$V_NAME/bin/python" ]]; then
    virtualenv -p "$V_PYTHON" "$V_HOME/$V_NAME"
fi

# Cleanup variable that aren't needed in the new shell
# TODO: Is this nesscary?
unset V_NAME
unset V_PYTHON
unset V_HOME

# Start a new shell, with the virtualenv availible
export VIRTUAL_ENV
export PATH="$VIRTUAL_ENV/bin:$PATH"
unset PYTHON_HOME
exec "$SHELL"
